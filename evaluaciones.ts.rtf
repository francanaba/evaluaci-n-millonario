{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ v \} from "convex/values";\
import \{ mutation, query \} from "./_generated/server";\
\
// Funci\'f3n para calcular el nivel seg\'fan la puntuaci\'f3n (umbrales m\'e1s agresivos)\
function calculateLevel(score: number): string \{\
  if (score <= 8) return "verde";   // Solo los mejores (promedio 1.3 o menos)\
  if (score <= 14) return "amarillo"; // Rango muy estrecho (promedio 1.4-2.3)\
  return "rojo";                    // La mayor\'eda caer\'e1 aqu\'ed (promedio 2.4+)\
\}\
\
/**\
 * Guardar una nueva evaluaci\'f3n\
 */\
export const saveEvaluation = mutation(\{\
  args: \{\
    responses: v.array(v.number()),\
    userEmail: v.optional(v.string()),\
    userName: v.optional(v.string()),\
    userWhatsApp: v.optional(v.string()),\
  \},\
  returns: v.object(\{\
    evaluationId: v.id("evaluations"),\
    stressScore: v.number(),\
    relationshipsScore: v.number(),\
    influenceScore: v.number(),\
    stressLevel: v.string(),\
    relationshipsLevel: v.string(),\
    influenceLevel: v.string(),\
    shareToken: v.string(),\
  \}),\
  handler: async (ctx, args) => \{\
    // Calcular puntuaciones por bloque\
    const stressScore = args.responses.slice(0, 5).reduce((a, b) => a + b, 0);\
    const relationshipsScore = args.responses.slice(5, 10).reduce((a, b) => a + b, 0);\
    const influenceScore = args.responses.slice(10, 15).reduce((a, b) => a + b, 0);\
\
    // Calcular niveles\
    const stressLevel = calculateLevel(stressScore);\
    const relationshipsLevel = calculateLevel(relationshipsScore);\
    const influenceLevel = calculateLevel(influenceScore);\
\
    // Generar token \'fanico para compartir\
    const shareToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\
\
    // Guardar en la base de datos\
    const evaluationId = await ctx.db.insert("evaluations", \{\
      responses: args.responses,\
      stressScore,\
      relationshipsScore,\
      influenceScore,\
      stressLevel,\
      relationshipsLevel,\
      influenceLevel,\
      userEmail: args.userEmail,\
      userName: args.userName,\
      userWhatsApp: args.userWhatsApp,\
      shareToken,\
    \});\
\
    // Log para notificaciones\
    console.log("Nueva evaluaci\'f3n completada:", \{\
      userName: args.userName,\
      userWhatsApp: args.userWhatsApp,\
      scores: \{ stressScore, relationshipsScore, influenceScore \},\
      levels: \{ stressLevel, relationshipsLevel, influenceLevel \}\
    \});\
\
    return \{\
      evaluationId,\
      stressScore,\
      relationshipsScore,\
      influenceScore,\
      stressLevel,\
      relationshipsLevel,\
      influenceLevel,\
      shareToken,\
    \};\
  \},\
\});\
\
/**\
 * Obtener todas las evaluaciones (para admin)\
 */\
export const getAllEvaluations = query(\{\
  args: \{\},\
  returns: v.array(v.object(\{\
    _id: v.id("evaluations"),\
    _creationTime: v.number(),\
    userName: v.optional(v.string()),\
    userWhatsApp: v.optional(v.string()),\
    stressScore: v.number(),\
    relationshipsScore: v.number(),\
    influenceScore: v.number(),\
    stressLevel: v.string(),\
    relationshipsLevel: v.string(),\
    influenceLevel: v.string(),\
    shareToken: v.optional(v.string()),\
  \})),\
  handler: async (ctx) => \{\
    return await ctx.db.query("evaluations").order("desc").collect();\
  \},\
\});\
\
/**\
 * Obtener resultados de evaluaci\'f3n por token p\'fablico (para compartir)\
 */\
export const getResultsByToken = query(\{\
  args: \{\
    token: v.string(),\
  \},\
  returns: v.union(\
    v.null(),\
    v.object(\{\
      userName: v.optional(v.string()),\
      stressScore: v.number(),\
      relationshipsScore: v.number(),\
      influenceScore: v.number(),\
      stressLevel: v.string(),\
      relationshipsLevel: v.string(),\
      influenceLevel: v.string(),\
      _creationTime: v.number(),\
    \})\
  ),\
  handler: async (ctx, args) => \{\
    const evaluation = await ctx.db\
      .query("evaluations")\
      .filter((q) => q.eq(q.field("shareToken"), args.token))\
      .first();\
\
    if (!evaluation) \{\
      return null;\
    \}\
\
    return \{\
      userName: evaluation.userName,\
      stressScore: evaluation.stressScore,\
      relationshipsScore: evaluation.relationshipsScore,\
      influenceScore: evaluation.influenceScore,\
      stressLevel: evaluation.stressLevel,\
      relationshipsLevel: evaluation.relationshipsLevel,\
      influenceLevel: evaluation.influenceLevel,\
      _creationTime: evaluation._creationTime,\
    \};\
  \},\
\});\
\
/**\
 * Eliminar una evaluaci\'f3n\
 */\
export const deleteEvaluation = mutation(\{\
  args: \{\
    evaluationId: v.id("evaluations"),\
  \},\
  returns: v.object(\{\
    success: v.boolean(),\
  \}),\
  handler: async (ctx, args) => \{\
    const evaluation = await ctx.db.get(args.evaluationId);\
    if (!evaluation) \{\
      throw new Error("Evaluaci\'f3n no encontrada");\
    \}\
\
    await ctx.db.delete(args.evaluationId);\
    return \{ success: true \};\
  \},\
\});\
\
    \
}